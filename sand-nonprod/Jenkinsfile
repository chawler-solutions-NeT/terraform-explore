pipeline {
    agent any

    parameters {
        choice(
            name: 'ACTION',
            choices: ['Plan Only', 'Plan and Apply', 'Destroy Only'],
            description: 'Select the Terraform action to perform'
        )
        string(
            name: 'BRANCH',
            defaultValue: 'feat/swarm_cluster',
            description: 'Enter the branch to use for Terraform actions'
        )
    }

    environment {
        TF_WORKSPACE = 'default'
    }

    tools {
        terraform 'terraform'
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    echo "Checking out branch: ${params.BRANCH}"
                    checkout scm: [
                        $class: 'GitSCM', 
                        branches: [[name: "*/${params.BRANCH}"]],
                        userRemoteConfigs: [[
                            url: 'https://github.com/chawler-solutions-NeT/terraform-explore.git',
                            credentialsId: 'chaw_id'
                        ]]
                    ]
                }
            }
        }

        stage('Setup Terraform Environment') {
            steps {
                withCredentials([aws(credentialsId: 'aws-credentials', region: 'us-east-1')]) {
                    dir("${env.WORKSPACE}/sand-nonprod") { 
                        script {
                            echo "Setting up Terraform environment"
                            sh '''
                            terraform version | sed -E "s/\\x1b\\[[0-9;]*m//g"
                            terraform init | sed -E "s/\\x1b\\[[0-9;]*m//g"
                            '''
                        }
                    }
                }
            }
        }

        stage('Terraform Plan') {
            when {
                expression { params.ACTION == 'Plan Only' || params.ACTION == 'Plan and Apply' || params.ACTION == 'Destroy Only' }
            }
            steps {
                withCredentials([aws(credentialsId: 'aws-credentials', region: 'us-east-1')]) {
                    dir("${env.WORKSPACE}/sand-nonprod") {
                        script {
                            echo "Running Terraform Plan"
                            sh '''
                            terraform plan | sed -E "s/\\x1b\\[[0-9;]*m//g"
                            '''
                        }
                    }
                }
            }
        }

        stage('Terraform Apply') {
            when {
                expression { params.ACTION == 'Plan and Apply' }
            }
            steps {
                withCredentials([aws(credentialsId: 'aws-credentials', region: 'us-east-1')]) {
                    dir("${env.WORKSPACE}/sand-nonprod") {
                        script {
                            input(message: "Do you want to proceed with Apply?", ok: "Apply")
                            sh '''
                            terraform apply -auto-approve | sed -E "s/\\x1b\\[[0-9;]*m//g"
                            '''
                        }
                    }
                }
            }
        }

        stage('Terraform Destroy') {
            when {
                expression { params.ACTION == 'Destroy Only' }
            }
            steps {
                withCredentials([aws(credentialsId: 'aws-credentials', region: 'us-east-1')]) {
                    dir("${env.WORKSPACE}/sand-nonprod") {
                        script {
                            input(message: "Do you want to proceed with Destroy?", ok: "Destroy")
                            sh '''
                            terraform destroy -auto-approve | sed -E "s/\\x1b\\[[0-9;]*m//g"
                            '''
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution completed.'
        }
        success {
            echo 'Terraform actions completed successfully.'
        }
        failure {
            echo 'Terraform actions failed. Check the logs for more details.'
        }
    }
}